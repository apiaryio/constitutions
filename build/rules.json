[
  {
    "intent": "Intent of the rule/description",
    "ruleName": "sample_rule",
    "functionName": "someFunction",
    "target": "Resource_URI_Template"
  },
  {
    "intent": "Intent of the rule/description",
    "ruleName": "sample_rule",
    "functionName": "someFunction",
    "target": "Response_Body"
  },
  {
    "intent": "Validates if there is no american spelling in JSON object bodies",
    "ruleName": "body_british_spelling",
    "functionName": "validateBodyBritishSpelling",
    "target": "Request_Body"
  },
  {
    "intent": "Validates if there is no american spelling in JSON object bodies",
    "ruleName": "body_british_spelling",
    "functionName": "validateBodyBritishSpelling",
    "target": "Response_Body"
  },
  {
    "intent": "JSON body string is a pretty printed JSON. It naively expects at least one line per key in parsed object.",
    "ruleName": "pretty_printed_json",
    "functionName": "validatePrettyPrintedJson",
    "target": "Request_Body"
  },
  {
    "intent": "JSON body string is a pretty printed JSON. It naively expects at least one line per key in parsed object.",
    "ruleName": "pretty_printed_json",
    "functionName": "validatePrettyPrintedJson",
    "target": "Response_Body"
  },
  {
    "intent": "Validates if there is no property containing all-caps `ID` string in JSON object bodies.",
    "ruleName": "prevent_all_caps_id_in_json",
    "functionName": "preventAllCapsIdInJson",
    "target": "Request_Body"
  },
  {
    "intent": "Validates if there is no property containing all-caps `ID` string in JSON object bodies.",
    "ruleName": "prevent_all_caps_id_in_json",
    "functionName": "preventAllCapsIdInJson",
    "target": "Response_Body"
  },
  {
    "intent": "Possible combinations are:\n   - 200: GET, DELETE, PATCH\n   - 201: POST\n   - 202: POST, DELETE, PATCH\n   - 206: GET\n",
    "ruleName": "proper_action_status_code",
    "functionName": "validateProperActionStatusCode",
    "target": "Action"
  },
  {
    "intent": "Validates if last literal part of URI template is in plural form.",
    "ruleName": "pluralised_resource_names_in_uri",
    "functionName": "validatePluralisedResourceNamesInUri",
    "target": "Resource_URI_Template"
  },
  {
    "intent": "Validates if literal parts of the URI templates are dash separated and lowercased. It expects no underscores and capital characters.",
    "ruleName": "dash_delimited_lowercased_uris",
    "functionName": "validateUriPartsDashSeparatedLowercase",
    "target": "Resource_URI_Template"
  },
  {
    "intent": "Validates if JSON object keys are in camel-case format. It expects no dashes or underscores in field names.",
    "ruleName": "json_camel_case_keys",
    "functionName": "validateJsonCamelCaseKeys",
    "target": "Request_Body"
  },
  {
    "intent": "Validates if JSON object keys are in camel-case format. It expects no dashes or underscores in field names.",
    "ruleName": "json_camel_case_keys",
    "functionName": "validateJsonCamelCaseKeys",
    "target": "Response_Body"
  },
  {
    "intent": "It validates that value under `id` key in body JSON object is in format of UUID [1].\n[1] http://en.wikipedia.org/wiki/Universally_unique_identifier",
    "ruleName": "uuid_in_json_id_keys",
    "functionName": "validateUUIDInJsonIdKeys",
    "target": "Request_Body"
  },
  {
    "intent": "It validates that value under `id` key in body JSON object is in format of UUID [1].\n[1] http://en.wikipedia.org/wiki/Universally_unique_identifier",
    "ruleName": "uuid_in_json_id_keys",
    "functionName": "validateUUIDInJsonIdKeys",
    "target": "Response_Body"
  }
]